CREATE TABLE IF NOT EXISTS difficulties(
    difficulty_id   INT             NOT NULL    PRIMARY KEY,
    difficulty_name VARCHAR(255)    NOT NULL,
    created_date    TIMESTAMPTZ     NOT NULL    DEFAULT NOW(),
    modified_date   TIMESTAMPTZ     NOT NULL    DEFAULT NOW()
    );

CREATE TABLE IF NOT EXISTS modules(
    module_id       INT             NOT NULL    PRIMARY KEY,
    module_name     VARCHAR(255)    NOT NULL,
    created_date    TIMESTAMPTZ     NOT NULL    DEFAULT NOW(),
    modified_date   TIMESTAMPTZ     NOT NULL    DEFAULT NOW()
    );

CREATE TABLE IF NOT EXISTS lessons(
    lesson_id       INT             NOT NULL    PRIMARY KEY,
    lesson_name     VARCHAR(255)    NOT NULL,
    description     TEXT            NOT NULL,
    module_id       INT             NOT NULL    REFERENCES  modules(module_id) ON DELETE CASCADE,
    difficulty_id   INT             NOT NULL    REFERENCES  difficulties(difficulty_id),
    content_path    TEXT            NOT NULL,
    created_date    TIMESTAMPTZ     NOT NULL    DEFAULT NOW(),
    modified_date   TIMESTAMPTZ     NOT NULL    DEFAULT NOW()
    );

CREATE TABLE IF NOT EXISTS progress(
    progress_id         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id          UUID            NOT NULL    REFERENCES auth.users(id),
    lesson_id           INT             NOT NULL    REFERENCES  lessons(lesson_id) ON DELETE CASCADE,
    completed           BOOLEAN         NOT NULL    DEFAULT FALSE,
    created_date        TIMESTAMPTZ     NOT NULL    DEFAULT NOW(),
    modified_date       TIMESTAMPTZ     NOT NULL    DEFAULT NOW()
    );

CREATE TABLE IF NOT EXISTS exercises(
    exercise_id         INT             NOT NULL    PRIMARY KEY,
    lesson_id           INT             NOT NULL    REFERENCES lessons(lesson_id) ON DELETE CASCADE,
    question            TEXT            NOT NULL,
    reason              TEXT            NOT NULL,
    created_date        TIMESTAMPTZ     NOT NULL    DEFAULT NOW(),
    modified_date       TIMESTAMPTZ     NOT NULL    DEFAULT NOW()
    );

CREATE TABLE IF NOT EXISTS exercise_options(
    exercise_option_id  INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    exercise_id         INT             NOT NULL        REFERENCES exercises(exercise_id) ON DELETE CASCADE,
    text                TEXT            NOT NULL,
    is_correct          BOOLEAN         NOT NULL        DEFAULT FALSE,
    created_date        TIMESTAMPTZ     NOT NULL        DEFAULT NOW(),
    modified_date       TIMESTAMPTZ     NOT NULL        DEFAULT NOW()
    );

CREATE TABLE IF NOT EXISTS sandboxes(
    sandbox_id      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    student_id      UUID            NOT NULL        REFERENCES auth.users(id),
    oracle_username VARCHAR(25)     NOT NULL,
    oracle_password VARCHAR(32)     NOT NULL,
    expire_at       TIMESTAMPTZ     NOT NULL,
    is_active       BOOLEAN         NOT NULL        DEFAULT FALSE,
    created_date    TIMESTAMPTZ     NOT NULL        DEFAULT NOW(),
    modified_date   TIMESTAMPTZ     NOT NULL        DEFAULT NOW()
    );

CREATE VIEW learning_content AS
SELECT m.module_id, m.module_name, l.lesson_id, l.lesson_name, l.description, l.content_path, d.difficulty_id, d.difficulty_name, p.completed, p.student_id
FROM modules AS m
         INNER JOIN lessons AS l ON l.module_id = m.module_id
         INNER JOIN difficulties AS d ON d.difficulty_id = l.difficulty_id
         LEFT JOIN progress AS p ON p.lesson_id = l.lesson_id
WHERE p.student_id is NULL OR p.student_id = auth.uid();

INSERT INTO difficulties (difficulty_id, difficulty_name)
VALUES
    (1, 'beginner'),
    (2, 'intermediate'),
    (3, 'advanced');

INSERT INTO modules (module_id, module_name)
VALUES
    (1, 'Introducción a las bases de datos'),
    (2, 'Habilidades fundamentales de SQL'),
    (3, 'Modelado y diseño de datos'),
    (4, 'SQL intermedio'),
    (5, 'SQL avanzado'),
    (6, 'Acerca de NoSQL');

-- Lessons for Module 1: Introduction to Databases
INSERT INTO lessons (lesson_id, lesson_name, module_id, difficulty_id, description, content_path)
VALUES
    (1, '¿Qué es una base de datos?', 1, 1, 'Aprende qué es una base de datos, por qué existe y cómo organiza la información de manera más eficaz que los archivos.', 'module_1/1_what_is_a_database.md'),
    (2, 'Datos en la vida cotidiana', 1, 1, 'Descubre cómo se comparan las bases de datos con las hojas de cálculo y cuándo usar cada una.', 'module_1/2_data_in_everyday_life.md'),
    (3, 'Sistemas de gestión de bases de datos', 1, 1, 'Comprende el papel del software de SGBD y la diferencia entre sistemas relacionales y NoSQL.', 'module_1/3_database_management_systems.md'),
    (4, 'Tablas, columnas y filas', 1, 1, 'Explora cómo se estructuran los datos en las bases de datos relacionales usando filas y columnas.', 'module_1/4_tables_columns_rows.md'),
    (5, 'Claves e identificadores', 1, 1, 'Aprende cómo las claves primarias garantizan la unicidad y permiten vincular tablas.', 'module_1/5_keys_and_identifiers.md');


-- Lessons for Module 2: Core SQL Skills
INSERT INTO lessons (lesson_id, lesson_name, module_id, difficulty_id, description, content_path)
VALUES
    (6, 'Introducción a SQL', 2, 1, 'Comienza con SQL aprendiendo su propósito y su estructura.', 'module_2/1_introduction_to_sql.md'),
    (7, 'Tablas y tipos de datos', 2, 1, 'Aprende a crear tablas y a elegir tipos de datos adecuados para las columnas.', 'module_2/2_tables_and_data_types.md'),
    (8, 'CRUD - Crear y actualizar', 2, 1, 'Practica agregar y modificar registros en una base de datos.', 'module_2/3_crud_create_and_update.md'),
    (9, 'CRUD - Leer', 2, 1, 'Usa la sentencia SELECT para obtener datos de tus tablas.', 'module_2/4_crud_read.md'),
    (10, 'CRUD - Eliminar', 2, 1, 'Elimina registros de forma segura utilizando el comando DELETE.', 'module_2/5_crud_delete.md'),
    (11, 'Cláusula WHERE', 2, 1, 'Restringe resultados aplicando condiciones con la cláusula WHERE.', 'module_2/6_where_clause.md'),
    (12, 'Ordenar resultados', 2, 1, 'Organiza los resultados de las consultas en orden ascendente o descendente.', 'module_2/7_sorting_results.md'),
    (13, 'Funciones de agregación', 2, 1, 'Resume datos con funciones como COUNT, AVG y SUM.', 'module_2/8_aggregation_functions.md'),
    (14, 'Agrupación y filtrado', 2, 1, 'Agrupa filas en categorías y filtra grupos con HAVING.', 'module_2/9_grouping_and_filtering.md');

-- Lessons for Module 3: Data Modeling and Design
INSERT INTO lessons (lesson_id, lesson_name, module_id, difficulty_id, description, content_path)
VALUES
    (15, 'Por qué importa el modelado de datos', 3, 1, 'Aprende por qué diseñar estructuras de datos es esencial para la eficiencia y la precisión.', 'module_3/1_why_data_modeling_matters.md'),
    (16, 'Entidades y atributos', 3, 1, 'Comprende las entidades (tablas) y los atributos (columnas) como los bloques fundamentales de una base de datos.', 'module_3/2_entities_and_attributes.md'),
    (17, 'Relaciones entre tablas', 3, 1, 'Explora las relaciones uno a uno, uno a muchos y muchos a muchos.', 'module_3/3_relationships_between_tables.md'),
    (18, 'Claves primarias y foráneas', 3, 1, 'Descubre cómo las claves identifican de forma única los registros y enlazan tablas.', 'module_3/4_primary_and_foreign_keys.md'),
    (19, 'Diagramas entidad–relación', 3, 1, 'Visualiza el diseño de bases de datos con diagramas ER.', 'module_3/5_entity_relationship_diagrams.md'),
    (20, 'Normalización', 3, 1, 'Organiza los datos para eliminar la redundancia y mejorar la integridad.', 'module_3/6_normalization.md'),
    (21, 'Cuándo y por qué desnormalizar', 3, 1, 'Aprende cuándo la desnormalización puede mejorar el rendimiento a pesar de la redundancia añadida.', 'module_3/7_when_and_why_to_denormalize.md');

-- Lessons for Module 4: Intermediate SQL
INSERT INTO lessons (lesson_id, lesson_name, module_id, difficulty_id, description, content_path)
VALUES
    (22, 'Trabajar con múltiples tablas', 4, 2, 'Aprende a consultar a través de múltiples tablas en una base de datos.', 'module_4/1_working_with_multiple_tables.md'),
    (23, 'Comprender los joins', 4, 2, 'Combina datos utilizando diferentes tipos de joins.', 'module_4/2_understanding_joins.md'),
    (24, 'Uso de subconsultas', 4, 2, 'Escribe consultas dentro de consultas para filtrar y calcular resultados.', 'module_4/3_using_subqueries.md'),
    (25, 'Expresiones de tabla comunes (CTE)', 4, 2, 'Simplifica consultas complejas con CTE para mejorar la legibilidad y la reutilización.', 'module_4/4_common_table_expressions.md'),
    (26, 'Creación y uso de vistas', 4, 2, 'Crea resultados de consultas reutilizables como tablas virtuales.', 'module_4/5_creating_and_using_views.md'),
    (27, 'Introducción a los procedimientos almacenados', 4, 2, 'Automatiza y reutiliza operaciones de SQL con procedimientos almacenados.', 'module_4/6_introduction_to_stored_procedures.md');

-- Lessons for Module 5: Advance SQL
INSERT INTO lessons (lesson_id, lesson_name, module_id, difficulty_id, description, content_path)
VALUES
    (28, 'Qué son los índices', 5, 3, 'Descubre cómo los índices aceleran las consultas y cuándo usarlos.', 'module_5/1_what_are_indexes.md'),
    (29, 'Tipos de índices', 5, 3, 'Aprende la diferencia entre índices agrupados y no agrupados.', 'module_5/2_types_of_indexes.md'),
    (30, 'Planes de ejecución de consultas', 5, 3, 'Analiza planes de ejecución para identificar cuellos de botella y mejorar el rendimiento.', 'module_5/3_query_execution_plans.md'),
    (31, 'Transacciones', 5, 3, 'Usa transacciones para agrupar consultas y garantizar la integridad de los datos.', 'module_5/4_transactions.md'),
    (32, 'Concurrencia y niveles de aislamiento', 5, 3, 'Comprende cómo los niveles de aislamiento manejan a múltiples usuarios trabajando al mismo tiempo.', 'module_5/5_concurrency_and_isolation_levels.md'),
    (33, 'Optimización del rendimiento', 5, 3, 'Aplica estrategias comunes para escribir consultas SQL eficientes.', 'module_5/6_performance_tuning.md');

-- Lessons for Module 6: About NoSQL
INSERT INTO lessons (lesson_id, lesson_name, module_id, difficulty_id, description, content_path)
VALUES
    (34, 'Introducción a las bases de datos no relacionales', 6, 1, 'Aprende qué son las bases de datos NoSQL y por qué existen.', 'module_6/1_introduction_to_non-relational_databases.md'),
    (35, 'Tipos de bases de datos NoSQL', 6, 1, 'Explora bases de datos clave-valor, de documentos, de columnas y de grafos.', 'module_6/2_types_of_nosql_databases.md'),
    (36, 'Cuándo usar NoSQL', 6, 2, 'Decide cuándo cada tipo de base de datos es la opción adecuada.', 'module_6/3_when_to_use_nosql.md'),
    (37, 'Manejo de datos no estructurados', 6, 2, 'Descubre cómo NoSQL maneja datos no estructurados o semiestructurados.', 'module_6/4_handling_unstructured_data.md'),
    (38, 'Escalabilidad y rendimiento', 6, 3, 'Conoce cómo NoSQL escala con fragmentación (sharding) y replicación.', 'module_6/5_scalability_and_performance.md');

-- ===== Row Level Security and Privileges =====

-- Enable Row Level Security
ALTER TABLE public.difficulties ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.modules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.lessons ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.exercises ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.progress ENABLE ROW LEVEL SECURITY;

-- Restrict base privileges and grant read-only to authenticated (reference tables)
REVOKE ALL ON TABLE public.difficulties FROM PUBLIC, anon, authenticated;
REVOKE ALL ON TABLE public.modules FROM PUBLIC, anon, authenticated;
REVOKE ALL ON TABLE public.lessons FROM PUBLIC, anon, authenticated;
REVOKE ALL ON TABLE public.exercises FROM PUBLIC, anon, authenticated;
REVOKE ALL ON TABLE public.exercise_options FROM PUBLIC, anon, authenticated;
REVOKE ALL ON TABLE public.progress FROM PUBLIC, anon, authenticated;

GRANT SELECT ON TABLE public.difficulties TO authenticated;
GRANT SELECT ON TABLE public.modules TO authenticated;
GRANT SELECT ON TABLE public.lessons TO authenticated;
GRANT SELECT ON TABLE public.exercises TO authenticated;
GRANT SELECT ON TABLE public.exercise_options TO authenticated;

-- Progress table: authenticated may perform CRUD, governed by RLS
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.progress TO authenticated;

-- Allow using the sequence for inserts into progress.progress_id
GRANT USAGE, SELECT ON SEQUENCE public.progress_progress_id_seq TO authenticated;

-- RLS policies: ownership-based CRUD for progress
CREATE POLICY "Progress select own rows" ON public.progress
    FOR SELECT TO authenticated
        USING (student_id = auth.uid());

CREATE POLICY "Progress insert own rows" ON public.progress
    FOR INSERT TO authenticated
       WITH CHECK (student_id = auth.uid());

CREATE POLICY "Progress update own rows" ON public.progress
    FOR UPDATE TO authenticated
        USING (student_id = auth.uid())
        WITH CHECK (student_id = auth.uid());

CREATE POLICY "Progress delete own rows" ON public.progress
    FOR DELETE TO authenticated
    USING (student_id = auth.uid());

-- RLS policies: ownership-based CRUD for sandboxes
CREATE POLICY "Sandbox select own rows" ON public.sandboxes
    FOR SELECT TO authenticated
        USING (student_id = auth.uid());

CREATE POLICY "Sandbox insert own rows" ON public.sandboxes
    FOR INSERT TO authenticated
       WITH CHECK (student_id = auth.uid());

CREATE POLICY "Sandbox update own rows" ON public.sandboxes
    FOR UPDATE TO authenticated
        USING (student_id = auth.uid())
        WITH CHECK (student_id = auth.uid());

CREATE POLICY "Sandbox delete own rows" ON public.sandboxes
    FOR DELETE TO authenticated
    USING (student_id = auth.uid());

-- DROP VIEW learning_content;
-- DROP TABLE sandboxes;
-- DROP TABLE exercises;
-- DROP TABLE progress;
-- DROP TABLE lessons;
-- DROP TABLE modules;
-- DROP TABLE difficulties;